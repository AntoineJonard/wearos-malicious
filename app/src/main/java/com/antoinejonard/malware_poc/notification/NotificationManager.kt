package com.antoinejonard.malware_poc.notification

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import androidx.core.app.NotificationCompat
import com.antoinejonard.malware_poc.MainActivity
import com.antoinejonard.malware_poc.R

object NotificationManager {
    private const val TAG: String = "NotificationsManager"
    const val HOST_NOTIF_ID = 2

    private fun createNotificationChannel(context: Context, notificationChannel: com.antoinejonard.malware_poc.notification.NotificationChannel) {
        // Create the NotificationChannel
        val name = notificationChannel.getName()
        val descriptionText = notificationChannel.getDescription()
        val importance = NotificationManager.IMPORTANCE_DEFAULT
        val channel = NotificationChannel(notificationChannel.id, name, importance).apply {
            description = descriptionText
        }
        // Register the channel with the system
        val notificationManager: NotificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.createNotificationChannel(channel)
    }

    fun createNetworkNotificationChannel(context: Context){
        createNotificationChannel(context, com.antoinejonard.malware_poc.notification.NotificationChannel.HOST_CHANNEL)
    }

    fun getNotification(context: Context, title : String, message : String, channel: com.antoinejonard.malware_poc.notification.NotificationChannel): Notification {
        val builder = getBuilder(context, channel, title, message)

        return builder.build()
    }

    fun getTimeOutNotification(context: Context, title : String, message : String, timeOutMillis: Long, channel: com.antoinejonard.malware_poc.notification.NotificationChannel): Notification {
        val builder = getBuilder(context, channel, title, message).also {
            it.setTimeoutAfter(timeOutMillis)
        }

        return builder.build()
    }

    private fun getBuilder(
        context: Context,
        channel: com.antoinejonard.malware_poc.notification.NotificationChannel,
        title: String,
        message: String
    ): NotificationCompat.Builder {
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }

        val pendingIntent: PendingIntent = PendingIntent.getActivity(context, 0, intent, 0)

        return NotificationCompat.Builder(context, channel.id)
            .setSmallIcon(R.drawable.secure)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            // Set the intent that will fire when the user taps the notification
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
    }
}