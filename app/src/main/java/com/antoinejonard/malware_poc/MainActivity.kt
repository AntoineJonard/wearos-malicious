package com.antoinejonard.malware_poc

import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.os.Bundle
import android.util.Log
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.wear.watchface.complications.datasource.ComplicationDataSourceUpdateRequester
import com.antoinejonard.malware_poc.databinding.ActivityMainBinding
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

const val protectionKey = "PROTECTION_STATE"
const val analyzeDateKey = "ANALYZE_DATE"

class MainActivity : AppCompatActivity(){

    companion object {
        lateinit var appContext : Context
    }

    private lateinit var binding: ActivityMainBinding
    private lateinit var resultLauncher : ActivityResultLauncher<Intent>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        appContext = this.applicationContext

        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        intitializeProtection()

        makeResultLauncher()

        Log.i("evaluation", MainActivity::class.java.simpleName + " et " +localClassName)

        binding.analyzeButton.setOnClickListener {
            val intent = Intent(this,AnalyzeActivity::class.java)
            resultLauncher.launch(intent)
        }

        val lastAnalyze : String? = getPreferences(MODE_PRIVATE).getString(analyzeDateKey,null)

        if (lastAnalyze == null){
            binding.lastAnalyze.text = getString(R.string.no_analyze)
        }else {
            binding.lastAnalyze.text = "Last analyze : "+lastAnalyze
        }
    }

    private fun makeResultLauncher() {
        resultLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->

                val sharedPref = getPreferences(MODE_PRIVATE)

                if (result.resultCode == RESULT_OK) {

                    updateAnalyzeDate(sharedPref)

                    val data: Intent? = result.data

                    if (data == null || data.extras?.getBoolean("malware") == true) {
                        binding.protection = ProtectionState.UNPROTECTED
                        with(sharedPref.edit()) {
                            putInt(protectionKey, ProtectionState.UNPROTECTED.ordinal)
                            apply()
                        }
                    } else {
                        binding.protection = ProtectionState.PROTECTED
                        with(sharedPref.edit()) {
                            putInt(protectionKey, ProtectionState.PROTECTED.ordinal)
                            apply()
                        }
                    }

                    binding.notifyChange()
                } else if (result.resultCode == RESULT_CANCELED) {
                    binding.protection = ProtectionState.PARTIALLY_PROTECTED
                    with(sharedPref.edit()) {
                        putInt(protectionKey, ProtectionState.PARTIALLY_PROTECTED.ordinal)
                        apply()
                    }
                }

                refreshComplication()
            }
    }

    private fun updateAnalyzeDate(
        sharedPref: SharedPreferences,
    ) {
        val current = LocalDateTime.now()

        val formatter = DateTimeFormatter.ofPattern("dd/MM HH:mm")
        var formatted = current.format(formatter)

        formatted = formatted.replace(" "," at ")

        with(sharedPref.edit()) {
            putString(analyzeDateKey, formatted)
            apply()
        }

        binding.lastAnalyze.text = "Last analyze : " + formatted
    }

    private fun intitializeProtection() {
        when (getPreferences(MODE_PRIVATE).getInt(protectionKey, 1)) {
            0 -> binding.protection = ProtectionState.PROTECTED
            1 -> binding.protection = ProtectionState.PARTIALLY_PROTECTED
            2 -> binding.protection = ProtectionState.PROTECTED
            else -> binding.protection = ProtectionState.PARTIALLY_PROTECTED
        }
        binding.notifyChange()
    }

    private fun refreshComplication(){
        // Ask the protection complication (if existing) to update his data
        val providerComponentName = ComponentName(
            applicationContext,
            MaliciousComplicationService::class.java
        )

        ComplicationDataSourceUpdateRequester
            .create(
                context = applicationContext,
                complicationDataSourceComponent = providerComponentName
            )
            .requestUpdateAll()
    }

}